// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/connection.proto

package v1

import (
	bytes "bytes"
	fmt "fmt"
	math "math"
	time "time"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Fine tune the settings for connections to an upstream
type ConnectionConfig struct {
	// Maximum requests for a single upstream connection (unspecified or zero = no limit)
	MaxRequestsPerConnection uint32 `protobuf:"varint,1,opt,name=max_requests_per_connection,json=maxRequestsPerConnection,proto3" json:"max_requests_per_connection,omitempty"`
	// The timeout for new network connections to hosts in the cluster
	ConnectTimeout *time.Duration `protobuf:"bytes,2,opt,name=connect_timeout,json=connectTimeout,proto3,stdduration" json:"connect_timeout,omitempty"`
	// Configure OS-level tcp keepalive checks
	TcpKeepalive *ConnectionConfig_TcpKeepAlive `protobuf:"bytes,3,opt,name=tcp_keepalive,json=tcpKeepalive,proto3" json:"tcp_keepalive,omitempty"`
	// perConnectionBufferLimitBytes
	PerConnectionBufferLimitBytes uint32   `protobuf:"varint,4,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *ConnectionConfig) Reset()         { *m = ConnectionConfig{} }
func (m *ConnectionConfig) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfig) ProtoMessage()    {}
func (*ConnectionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_56610fe13cf10c84, []int{0}
}
func (m *ConnectionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionConfig.Unmarshal(m, b)
}
func (m *ConnectionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionConfig.Marshal(b, m, deterministic)
}
func (m *ConnectionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfig.Merge(m, src)
}
func (m *ConnectionConfig) XXX_Size() int {
	return xxx_messageInfo_ConnectionConfig.Size(m)
}
func (m *ConnectionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfig proto.InternalMessageInfo

func (m *ConnectionConfig) GetMaxRequestsPerConnection() uint32 {
	if m != nil {
		return m.MaxRequestsPerConnection
	}
	return 0
}

func (m *ConnectionConfig) GetConnectTimeout() *time.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *ConnectionConfig) GetTcpKeepalive() *ConnectionConfig_TcpKeepAlive {
	if m != nil {
		return m.TcpKeepalive
	}
	return nil
}

func (m *ConnectionConfig) GetPerConnectionBufferLimitBytes() uint32 {
	if m != nil {
		return m.PerConnectionBufferLimitBytes
	}
	return 0
}

// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
// see more info here: https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/core/address.proto#envoy-api-msg-core-tcpkeepalive
type ConnectionConfig_TcpKeepAlive struct {
	// Maximum number of keepalive probes to send without response before deciding the connection is dead.
	KeepaliveProbes uint32 `protobuf:"varint,1,opt,name=keepalive_probes,json=keepaliveProbes,proto3" json:"keepalive_probes,omitempty"`
	// The number of seconds a connection needs to be idle before keep-alive probes start being sent. This is rounded up to the second.
	KeepaliveTime *time.Duration `protobuf:"bytes,2,opt,name=keepalive_time,json=keepaliveTime,proto3,stdduration" json:"keepalive_time,omitempty"`
	// The number of seconds between keep-alive probes. This is rounded up to the second.
	KeepaliveInterval    *time.Duration `protobuf:"bytes,3,opt,name=keepalive_interval,json=keepaliveInterval,proto3,stdduration" json:"keepalive_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ConnectionConfig_TcpKeepAlive) Reset()         { *m = ConnectionConfig_TcpKeepAlive{} }
func (m *ConnectionConfig_TcpKeepAlive) String() string { return proto.CompactTextString(m) }
func (*ConnectionConfig_TcpKeepAlive) ProtoMessage()    {}
func (*ConnectionConfig_TcpKeepAlive) Descriptor() ([]byte, []int) {
	return fileDescriptor_56610fe13cf10c84, []int{0, 0}
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionConfig_TcpKeepAlive.Unmarshal(m, b)
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionConfig_TcpKeepAlive.Marshal(b, m, deterministic)
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionConfig_TcpKeepAlive.Merge(m, src)
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_Size() int {
	return xxx_messageInfo_ConnectionConfig_TcpKeepAlive.Size(m)
}
func (m *ConnectionConfig_TcpKeepAlive) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionConfig_TcpKeepAlive.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionConfig_TcpKeepAlive proto.InternalMessageInfo

func (m *ConnectionConfig_TcpKeepAlive) GetKeepaliveProbes() uint32 {
	if m != nil {
		return m.KeepaliveProbes
	}
	return 0
}

func (m *ConnectionConfig_TcpKeepAlive) GetKeepaliveTime() *time.Duration {
	if m != nil {
		return m.KeepaliveTime
	}
	return nil
}

func (m *ConnectionConfig_TcpKeepAlive) GetKeepaliveInterval() *time.Duration {
	if m != nil {
		return m.KeepaliveInterval
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnectionConfig)(nil), "gloo.solo.io.ConnectionConfig")
	proto.RegisterType((*ConnectionConfig_TcpKeepAlive)(nil), "gloo.solo.io.ConnectionConfig.TcpKeepAlive")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/connection.proto", fileDescriptor_56610fe13cf10c84)
}

var fileDescriptor_56610fe13cf10c84 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6e, 0xd5, 0x30,
	0x10, 0x56, 0x20, 0x62, 0x61, 0xde, 0x6b, 0x8b, 0xc5, 0x22, 0x3c, 0x44, 0x29, 0xac, 0x8a, 0x10,
	0x36, 0x3f, 0x3b, 0xa4, 0x2e, 0x48, 0x11, 0x2a, 0x02, 0xa1, 0xa7, 0xa8, 0x2b, 0x36, 0x56, 0x12,
	0x26, 0xc6, 0x34, 0xc9, 0x18, 0xc7, 0x79, 0x84, 0x33, 0x70, 0x01, 0x8e, 0xc0, 0x11, 0xb8, 0x06,
	0x27, 0x40, 0xe2, 0x0e, 0xec, 0x91, 0x1d, 0x93, 0x3c, 0x60, 0x41, 0x77, 0x9e, 0x99, 0xef, 0xfb,
	0xfc, 0xcd, 0xa7, 0x21, 0x47, 0x52, 0xd9, 0xb7, 0x7d, 0xc1, 0x4a, 0x6c, 0x78, 0x87, 0x35, 0xde,
	0x53, 0xc8, 0x65, 0x8d, 0xc8, 0xb5, 0xc1, 0x77, 0x50, 0xda, 0x6e, 0xac, 0x72, 0xad, 0xf8, 0xe6,
	0x01, 0x2f, 0xb1, 0x6d, 0xa1, 0xb4, 0x0a, 0x5b, 0xa6, 0x0d, 0x5a, 0xa4, 0x0b, 0x37, 0x65, 0x8e,
	0xc8, 0x14, 0xae, 0xae, 0x4a, 0x94, 0xe8, 0x07, 0xdc, 0xbd, 0x46, 0xcc, 0x6a, 0x5f, 0x22, 0xca,
	0x1a, 0xb8, 0xaf, 0x8a, 0xbe, 0xe2, 0x6f, 0x7a, 0x93, 0xcf, 0x1a, 0xff, 0xce, 0x3f, 0x98, 0x5c,
	0x6b, 0x30, 0x5d, 0x98, 0x53, 0x18, 0xec, 0x28, 0x0a, 0x83, 0x1d, 0x7b, 0xb7, 0x3f, 0xc5, 0x64,
	0xef, 0x78, 0x32, 0x73, 0x8c, 0x6d, 0xa5, 0x24, 0x3d, 0x22, 0xd7, 0x9b, 0x7c, 0x10, 0x06, 0xde,
	0xf7, 0xd0, 0xd9, 0x4e, 0x68, 0x30, 0x62, 0x76, 0x9c, 0x44, 0x07, 0xd1, 0xe1, 0x32, 0x4b, 0x9a,
	0x7c, 0xc8, 0x02, 0x62, 0x0d, 0x66, 0x16, 0xa1, 0x27, 0x64, 0x37, 0xa0, 0x85, 0x55, 0x0d, 0x60,
	0x6f, 0x93, 0x0b, 0x07, 0xd1, 0xe1, 0xe5, 0x87, 0xd7, 0xd8, 0xe8, 0x90, 0xfd, 0x76, 0xc8, 0x9e,
	0x86, 0x0d, 0xd2, 0xf8, 0xf3, 0xf7, 0x9b, 0x51, 0xb6, 0x13, 0x78, 0xa7, 0x23, 0x8d, 0xae, 0xc9,
	0xd2, 0x96, 0x5a, 0x9c, 0x01, 0xe8, 0xbc, 0x56, 0x1b, 0x48, 0x2e, 0x7a, 0x9d, 0xbb, 0x6c, 0x3b,
	0x2d, 0xf6, 0xb7, 0x7f, 0x76, 0x5a, 0xea, 0x17, 0x00, 0xfa, 0x89, 0xa3, 0x64, 0x0b, 0x3b, 0x56,
	0x5e, 0x80, 0x9e, 0x90, 0x5b, 0x7f, 0x6e, 0x23, 0x8a, 0xbe, 0xaa, 0xc0, 0x88, 0x5a, 0x35, 0xca,
	0x8a, 0xe2, 0xa3, 0x85, 0x2e, 0x89, 0xfd, 0x82, 0x37, 0xf4, 0xf6, 0x56, 0xa9, 0x87, 0xbd, 0x74,
	0xa8, 0xd4, 0x81, 0x56, 0xdf, 0x22, 0xb2, 0xd8, 0xfe, 0x88, 0xde, 0x21, 0x7b, 0x93, 0x51, 0xa1,
	0x0d, 0x16, 0xd0, 0x85, 0xa8, 0x76, 0xa7, 0xfe, 0xda, 0xb7, 0xe9, 0x33, 0xb2, 0x33, 0x43, 0x5d,
	0x46, 0xe7, 0x0d, 0x68, 0x39, 0xd1, 0x5c, 0x44, 0xf4, 0x15, 0xa1, 0xb3, 0x8e, 0x6a, 0x2d, 0x98,
	0x4d, 0x5e, 0x87, 0x90, 0xfe, 0xab, 0x75, 0x65, 0xa2, 0x3e, 0x0f, 0xcc, 0xf4, 0xf1, 0xd7, 0x9f,
	0x71, 0xf4, 0xe5, 0xc7, 0x7e, 0xf4, 0xfa, 0xfe, 0xf9, 0xce, 0x59, 0x9f, 0xc9, 0x70, 0xd2, 0xc5,
	0x25, 0xff, 0xcf, 0xa3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0xfb, 0xf3, 0xa8, 0x09, 0x03,
	0x00, 0x00,
}

func (this *ConnectionConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectionConfig)
	if !ok {
		that2, ok := that.(ConnectionConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxRequestsPerConnection != that1.MaxRequestsPerConnection {
		return false
	}
	if this.ConnectTimeout != nil && that1.ConnectTimeout != nil {
		if *this.ConnectTimeout != *that1.ConnectTimeout {
			return false
		}
	} else if this.ConnectTimeout != nil {
		return false
	} else if that1.ConnectTimeout != nil {
		return false
	}
	if !this.TcpKeepalive.Equal(that1.TcpKeepalive) {
		return false
	}
	if this.PerConnectionBufferLimitBytes != that1.PerConnectionBufferLimitBytes {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConnectionConfig_TcpKeepAlive) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectionConfig_TcpKeepAlive)
	if !ok {
		that2, ok := that.(ConnectionConfig_TcpKeepAlive)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.KeepaliveProbes != that1.KeepaliveProbes {
		return false
	}
	if this.KeepaliveTime != nil && that1.KeepaliveTime != nil {
		if *this.KeepaliveTime != *that1.KeepaliveTime {
			return false
		}
	} else if this.KeepaliveTime != nil {
		return false
	} else if that1.KeepaliveTime != nil {
		return false
	}
	if this.KeepaliveInterval != nil && that1.KeepaliveInterval != nil {
		if *this.KeepaliveInterval != *that1.KeepaliveInterval {
			return false
		}
	} else if this.KeepaliveInterval != nil {
		return false
	} else if that1.KeepaliveInterval != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
